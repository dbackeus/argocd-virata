# This ConfigMap is just a way to define the cloudflared config.yaml file in k8s.
# It's useful to define it in k8s, rather than as a stand-alone .yaml file, because
# this lets you use various k8s templating solutions (e.g. Helm charts) to
# parameterize your config, instead of just using string literals.
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: cloudflared
  name: cloudflared
data:
  config.yaml: |
    tunnel: virata
    credentials-file: /etc/cloudflared/creds/credentials.json
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    no-autoupdate: true # updates should be handled by replacing k8s pod image
    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    #
    # Remember, these rules route traffic from cloudflared to a local service. To route traffic
    # from the internet to cloudflared, run `cloudflared tunnel route dns <tunnel> <hostname>`.
    # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
    ingress:
    - hostname: raagtime.com
      service: http://web.raagtime.svc.cluster.local:3000
    - hostname: kubernetes.perfectskies.com
      service: tcp://kubernetes.default.svc:6443
      originRequest:
        proxyType: socks
    - hostname: hello.perfectskies.com
      service: http://hello-app-service.default.svc.cluster.local:8000
    - hostname: grafana.perfectskies.com
      service: http://kube-prometheus-stack-grafana.monitoring.svc.cluster.local:80
    - hostname: raagtime.perfectskies.com
      service: http://web.raagtime.svc.cluster.local:3000
    # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
    - service: http_status:404
